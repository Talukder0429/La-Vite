package helpers;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Iterator;
import java.util.List;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import queryhelper.QueryBuilder;
import queryhelper.Row;
import servlets.FormServlet;

@WebServlet("/FileUploadHandler")
public class FileUploadHandler extends HttpServlet {

	private static final long serialVersionUID = 1;
	private int MERGES = 0;

	// start of col. names
	private String[] cp = { "unique_identifier", "unique_identifier_value", "date_of_birth_yyyy_mm_dd", "phone_number",
			"does_the_client_have_an_email_address", "email_address", "street_number", "street_name", "street_type",
			"street_direction", "unit_suite_apt", "city", "province", "postal_code", "official_language_of_preference",
			"consent_for_future_research_consultation" };
	private String[] nar = { "UPDATE_RECORD_ID", "UNIQUE_IDENTIFIER", "UNIQUE_IDENTIFIER_VALUE",
			"DATE_OF_BIRTH_YYYY_MM_DD", "POSTAL_CODE_WHERE_THE_SERVICE_WAS_RECEIVED",
			"START_DATE_OF_ASSESSMENT_YYYY_MM_DD", "LANGUAGE_OF_SERVICE", "OFFICIAL_LANGUAGE_OF_PREFERENCE",
			"TYPE_OF_INSTITUTION_ORGANIZATION_WHERE_CLIENT_RECEIVED_SERVICES", "REFERRED_BY",
			"INCREASE_KNOWLEDGE_OF_LIFE_IN_CANADA", "INCREASE_KNOWLEDGE_OF_LIFE_IN_CANADA_REFERRALS",
			"INCREASE_KNOWLEDGE_OF_COMMUNITY_AND_GOVERNMENT_SERVICES",
			"INCREASE_KNOWLEDGE_OF_COMMUNITY_AND_GOVERNMENT_SERVICES_REFERRALS",
			"INCREASE_KNOWLEDGE_OF_WORKING_IN_CANADA", "INCREASE_KNOWLEDGE_OF_WORKING_IN_CANADA_REFERRALS",
			"INCREASE_KNOWLEDGE_OF_EDUCATION_IN_CANADA", "INCREASE_KNOWLEDGE_OF_EDUCATION_IN_CANADA_REFERRALS",
			"INCREASE_THE_FOLLOWING_SOCIAL_NETWORKS", "INCREASE_THE_FOLLOWING_SOCIAL_NETWORKS_REFERRALS",
			"INCREASE_THE_FOLLOWING_PROFESSIONAL_NETWORKS", "INCREASE_THE_FOLLOWING_PROFESSIONAL_NETWORKS_REFERRALS",
			"INCREASE_THE_FOLLOWING_ACCESS_TO_LOCAL_COMMUNITY_SERVICES",
			"INCREASE_THE_FOLLOWING_ACCESS_TO_LOCAL_COMMUNITY_SERVICES_REFERRALS",
			"INCREASE_THE_FOLLOWING_LEVEL_OF_COMMUNITY_INVOLVEMENT",
			"INCREASE_THE_FOLLOWING_LEVEL_OF_COMMUNITY_INVOLVEMENT_REFERRALS", "IMPROVE_LANGUAGE_SKILLS",
			"IMPROVE_LANGUAGE_SKILLS_REFERRALS", "IMPROVE_LANGUAGE_SKILLS_TO", "IMPROVE_OTHER_SKILLS",
			"IMPROVE_OTHER_SKILLS_REFERRALS", "IMPROVE_OTHER_SKILLS_TO", "FIND_EMPLOYMENT", "FIND_EMPLOYMENT_REFERRALS",
			"FIND_EMPLOYMENT_TIMEFRAME", "FIND_EMPLOYMENT_MINIMUM_ONE_YEARS_WORK_EXPERIENCE",
			"FIND_EMPLOYMENT_INTENDS_TO_WORK_IN_AN_OCCUPATION_CORRESPONDING_TO_WHICH_NATIONAL_OCCUPATION_CLASSIFICATION_SKILL_LEVEL",
			"FIND_EMPLOYMENT_INTENDS_TO_OBTAIN_CREDENTIAL_RECOGNITION_OR_OBTAIN_LICENSE_TO_WORK_IN_CANADA",
			"CLIENT_INTENDS_TO_BECOME_A_CANADIAN_CITIZEN", "SUPPORT_SERVICES_MAY_BE_REQUIRED",
			"CARE_FOR_NEWCOMER_CHILDREN_ADULT", "TRANSPORTATION_ADULT", "PROVISIONS_FOR_DISABILITIES_ADULT",
			"TRANSLATION_ADULT", "INTERPRETATION_ADULT", "CRISIS_COUNSELLING_ADULT", "NON_IRCC_PROGRAM_SERVICES_NEEDED",
			"FOOD_CLOTHING_OTHER_MATERIAL_NEEDS", "FOOD_CLOTHING_OTHER_MATERIAL_NEEDS_REFERRALS",
			"HOUSING_ACCOMMODATION", "HOUSING_ACCOMMODATION_REFERRALS", "HEALTH_MENTAL_HEALTH_WELL_BEING",
			"HEALTH_MENTAL_HEALTH_WELL_BEING_REFERRALS", "FINANCIAL", "FINANCIAL_REFERRALS", "FAMILY_SUPPORT",
			"FAMILY_SUPPORT_REFERRALS", "LANGUAGE_NON_IRCC", "LANGUAGE_NON_IRCC_REFERRALS",
			"EDUCATION_SKILLS_DEVELOPMENT", "EDUCATION_SKILLS_DEVELOPMENT_REFERRALS", "EMPLOYMENT_RELATED",
			"EMPLOYMENT_RELATED_REFERRALS", "LEGAL_INFORMATION_AND_SERVICES",
			"LEGAL_INFORMATION_AND_SERVICES_REFERRALS", "COMMUNITY_SERVICES", "COMMUNITY_SERVICES_REFERRALS",
			"SUPPORT_SERVICES_RECEIVED", "CARE_FOR_NEWCOMER_CHILDREN_CHILD", "CHILD_1_AGE", "CHILD_1_TYPE_OF_CARE",
			"CHILD_2_AGE", "CHILD_2_TYPE_OF_CARE", "CHILD_3_AGE", "CHILD_3_TYPE_OF_CARE", "CHILD_4_AGE",
			"CHILD_4_TYPE_OF_CARE", "CHILD_5_AGE", "CHILD_5_TYPE_OF_CARE", "TRANSPORTATION_CHILD",
			"PROVISIONS_FOR_DISABILITIES_CHILD", "TRANSLATION_CHILD", "BETWEEN_TRANSLATION", "AND_TRANSLATION",
			"INTERPRETATION_CHILD", "BETWEEN_INTERPRETATION", "AND_INTERPRETATION", "CRISIS_COUNSELLING_CHILD",
			"SETTLEMENT_PLAN_COMPLETED_AND_SHARED_WITH_CLIENT", "END_DATE_OF_ASSESSMENT_YYYY_MM_DD",
			"REASON_FOR_UPDATE" };
	private String[] cc = { "UPDATE_RECORD_ID", "UNIQUE_IDENTIFIER", "UNIQUE_IDENTIFIER_VALUE",
			"DATE_OF_BIRTH_YYYY_MM_DD", "POSTAL_CODE_WHERE_THE_SERVICE_WAS_RECEIVED", "LANGUAGE_OF_SERVICE",
			"OFFICIAL_LANGUAGE_OF_PREFERENCE", "REFERRED_BY", "ACTIVITY_UNDER_WHICH_CLIENT_RECEIVED_SERVICES",
			"TYPE_OF_INSTITUTION_ORGANIZATION_WHERE_CLIENT_RECEIVED_SERVICES", "TYPE_OF_EVENT_ATTENDED",
			"TYPE_OF_SERVICE", "MAIN_TOPIC_FOCUS_OF_THE_SERVICE_RECEIVED", "SERVICE_RECEIVED",
			"NUMBER_OF_UNIQUE_PARTICIPANTS", "DID_VOLUNTEERS_FROM_THE_HOST_COMMUNITY_PARTICIPATE_IN_THE_ACTIVITY",
			"DIRECTED_AT_A_SPECIFIC_TARGET_GROUP", "TARGET_GROUP_CHILDREN_0_14_YRS", "TARGET_GROUP_YOUTH_15_24_YRS",
			"TARGET_GROUP_SENIOR", "TARGET_GROUP_GENDER_SPECIFIC", "TARGET_GROUP_REFUGEES",
			"TARGET_GROUP_ETHNIC_CULTURAL_LINGUISTIC_GROUP", "TARGET_GROUP_DEAF_OR_HARD_OF_HEARING",
			"TARGET_GROUP_BLIND_OR_PARTIALLY_SIGHTED", "TARGET_GROUP_LESBIAN_GAY_BISEXUAL_TRANSGENDER_QUEER_LGBTQ",
			"TARGET_GROUP_FAMILIES_PARENTS", "TARGET_GROUP_OTHER_IMPAIRMENTS_PHYSICAL_MENTAL",
			"TARGET_GROUP_CLIENTS_WITH_INTERNATIONAL_TRAINING_IN_A_REGULATED_PROFESSION",
			"TARGET_GROUP_CLIENTS_WITH_INTERNATIONAL_TRAINING_IN_A_REGULATED_TRADE",
			"TARGET_GROUP_OFFICIAL_LANGUAGE_MINORITIES", "STATUS_OF_SERVICE", "REASON_FOR_LEAVING_SERVICE",
			"START_DATE_YYYY_MM_DD", "END_DATE_YYYY_MM_DD", "PROJECTED_END_DATE_YYYY_MM_DD",
			"WAS_ESSENTIAL_SKILLS_AND_APTITUDES_TRAINING_RECEIVED_AS_PART_OF_THE_SERVICE", "COMPUTER_SKILLS",
			"DOCUMENT_USE", "INTERPERSONAL_SKILLS_AND_WORKPLACE_CULTURE", "LEADERSHIP_TRAINING", "LIFE_SKILLS",
			"NUMERACY", "SUPPORT_SERVICES_RECEIVED", "CARE_FOR_NEWCOMER_CHILDREN_CHILD", "CHILD_1_AGE",
			"CHILD_1_TYPE_OF_CARE", "CHILD_2_AGE", "CHILD_2_TYPE_OF_CARE", "CHILD_3_AGE", "CHILD_3_TYPE_OF_CARE",
			"CHILD_4_AGE", "CHILD_4_TYPE_OF_CARE", "CHILD_5_AGE", "CHILD_5_TYPE_OF_CARE", "TRANSPORTATION_CHILD",
			"PROVISIONS_FOR_DISABILITIES_CHILD", "TRANSLATION_CHILD", "BETWEEN_TRANSLATION", "AND_TRANSLATION",
			"INTERPRETATION_CHILD", "BETWEEN_INTERPRETATION", "AND_INTERPRETATION", "CRISIS_COUNSELLING_CHILD",
			"TOTAL_LENGTH_OF_SERVICE_HOURS", "TOTAL_LENGTH_OF_SERVICE_MINUTES", "REASON_FOR_UPDATE" };
	private String[] io = { "UPDATE_RECORD_ID", "UNIQUE_IDENTIFIER", "UNIQUE_IDENTIFIER_VALUE",
			"DATE_OF_BIRTH_YYYY_MM_DD", "POSTAL_CODE_WHERE_THE_SERVICE_WAS_RECEIVED",
			"START_DATE_OF_SERVICE_YYYY_MM_DD", "LANGUAGE_OF_SERVICE", "OFFICIAL_LANGUAGE_OF_PREFERENCE",
			"TYPE_OF_INSTITUTION_ORGANIZATION_WHERE_CLIENT_RECEIVED_SERVICES", "REFERRED_BY", "SERVICE_RECEIVED",
			"TOTAL_LENGTH_OF_ORIENTATION", "TOTAL_LENGTH_OF_ORIENTATION_HOURS", "TOTAL_LENGTH_OF_ORIENTATION_MINUTES",
			"NUMBER_OF_CLIENTS_IN_GROUP", "DIRECTED_AT_A_SPECIFIC_TARGET_GROUP", "TARGET_GROUP_CHILDREN_0_14_YRS",
			"TARGET_GROUP_YOUTH_15_24_YRS", "TARGET_GROUP_SENIOR", "TARGET_GROUP_GENDER_SPECIFIC",
			"TARGET_GROUP_REFUGEES", "TARGET_GROUP_ETHNIC_CULTURAL_LINGUISTIC_GROUP",
			"TARGET_GROUP_DEAF_OR_HARD_OF_HEARING", "TARGET_GROUP_BLIND_OR_PARTIALLY_SIGHTED",
			"TARGET_GROUP_LESBIAN_GAY_BISEXUAL_TRANSGENDER_QUEER_LGBTQ", "TARGET_GROUP_FAMILIES_PARENTS",
			"TARGET_GROUP_OTHER_IMPAIRMENTS_PHYSICAL_MENTAL",
			"TARGET_GROUP_CLIENTS_WITH_INTERNATIONAL_TRAINING_IN_A_REGULATED_PROFESSION",
			"TARGET_GROUP_CLIENTS_WITH_INTERNATIONAL_TRAINING_IN_A_REGULATED_TRADE",
			"TARGET_GROUP_OFFICIAL_LANGUAGE_MINORITIES", "OVERVIEW_OF_CANADA", "OVERVIEW_OF_CANADA_REFERRALS",
			"SOURCES_OF_INFORMATION", "SOURCES_OF_INFORMATION_REFERRALS", "RIGHTS_AND_FREEDOMS",
			"RIGHTS_AND_FREEDOMS_REFERRALS", "CANADIAN_LAW_AND_JUSTICE", "CANADIAN_LAW_AND_JUSTICE_REFERRALS",
			"IMPORTANT_DOCUMENTS", "IMPORTANT_DOCUMENTS_REFERRALS", "IMPROVING_ENGLISH_OR_FRENCH",
			"IMPROVING_ENGLISH_OR_FRENCH_REFERRALS", "EMPLOYMENT_AND_INCOME", "EMPLOYMENT_AND_INCOME_REFERRALS",
			"EDUCATION", "EDUCATION_REFERRALS", "HOUSING", "HOUSING_REFERRALS", "HEALTH", "HEALTH_REFERRALS",
			"MONEY_AND_FINANCES", "MONEY_AND_FINANCES_REFERRALS", "TRANSPORTATION_ADULT", "TRANSPORTATION_REFERRALS",
			"COMMUNICATIONS_AND_MEDIA", "COMMUNICATIONS_AND_MEDIA_REFERRALS", "COMMUNITY_ENGAGEMENT",
			"COMMUNITY_ENGAGEMENT_REFERRALS", "BECOMING_A_CANADIAN_CITIZEN", "BECOMING_A_CANADIAN_CITIZEN_REFERRALS",
			"INTERPERSONAL_CONFLICT", "INTERPERSONAL_CONFLICT_REFERRALS",
			"WAS_ESSENTIAL_SKILLS_AND_APTITUDES_TRAINING_RECEIVED_AS_PART_OF_THE_SERVICE", "COMPUTER_SKILLS",
			"DOCUMENT_USE", "INTERPERSONAL_SKILLS_AND_WORKPLACE_CULTURE", "LEADERSHIP_TRAINING", "NUMERACY",
			"WAS_LIFE_SKILLS_OR_RESPONSIBILITIES_OF_CITIZENSHIP_INFORMATION_RECEIVED_AS_PART_OF_THIS_SERVICE",
			"LIFE_SKILLS", "RIGHTS_AND_RESPONSIBILITIES_OF_CITIZENSHIP_BASED_ON_DISCOVER_CANADA",
			"SUPPORT_SERVICES_RECEIVED", "CARE_FOR_NEWCOMER_CHILDREN_CHILD", "CHILD_1_AGE", "CHILD_1_TYPE_OF_CARE",
			"CHILD_2_AGE", "CHILD_2_TYPE_OF_CARE", "CHILD_3_AGE", "CHILD_3_TYPE_OF_CARE", "CHILD_4_AGE",
			"CHILD_4_TYPE_OF_CARE", "CHILD_5_AGE", "CHILD_5_TYPE_OF_CARE", "TRANSPORTATION_CHILD",
			"PROVISIONS_FOR_DISABILITIES_CHILD", "TRANSLATION_CHILD", "BETWEEN_TRANSLATION", "AND_TRANSLATION",
			"INTERPRETATION_CHILD", "BETWEEN_INTERPRETATION", "AND_INTERPRETATION", "CRISIS_COUNSELLING_CHILD",
			"END_DATE_OF_SERVICE_YYYY_MM_DD", "REASON_FOR_UPDATE" };
	private String[] emp = { "UPDATE_RECORD_ID", "UNIQUE_IDENTIFIER", "UNIQUE_IDENTIFIER_VALUE",
			"DATE_OF_BIRTH_YYYY_MM_DD", "POSTAL_CODE_WHERE_THE_SERVICE_WAS_RECEIVED",
			"REGISTRATION_IN_AN_EMPLOYMENT_INTERVENTION", "A_REFERRAL_TO", "LANGUAGE_OF_SERVICE",
			"OFFICIAL_LANGUAGE_OF_PREFERENCE", "TYPE_OF_INSTITUTION_ORGANIZATION_WHERE_CLIENT_RECEIVED_SERVICES",
			"REFERRED_BY", "REFERRAL_DATE_YYYY_MM_DD", "EMPLOYMENT_STATUS", "EDUCATION_STATUS", "OCCUPATION_IN_CANADA",
			"INTENDED_OCCUPATION", "INTERVENTION_TYPE", "LONG_TERM_INTERVENTION_INTERVENTION_RECEIVED",
			"LONG_TERM_INTERVENTION_STATUS_OF_INTERVENTION", "LONG_TERM_INTERVENTION_REASON_FOR_LEAVING_INTERVENTION",
			"LONG_TERM_INTERVENTION_START_DATE_YYYY_MM_DD", "LONG_TERM_INTERVENTION_END_DATE_YYYY_MM_DD",
			"LONG_TERM_INTERVENTION_SIZE_OF_EMPLOYER", "LONG_TERM_INTERVENTION_PLACEMENT_WAS",
			"LONG_TERM_INTERVENTION_HOURS_PER_WEEK", "LONG_TERM_INTERVENTION_CLIENT_MET_MENTOR_REGULARLY_AT",
			"LONG_TERM_INTERVENTION_AVERAGE_HOURS_WEEK_IN_CONTACT_WITH_MENTOR",
			"LONG_TERM_INTERVENTION_PROFESSION_TRADE_FOR_WHICH_SERVICES_WERE_RECEIVED",
			"WAS_ESSENTIAL_SKILLS_AND_APTITUDES_TRAINING_RECEIVED_AS_PART_OF_THE_SERVICE", "COMPUTER_SKILLS",
			"DOCUMENT_USE", "INTERPERSONAL_SKILLS_AND_WORKPLACE_CULTURE", "LEADERSHIP_TRAINING", "NUMERACY",
			"SHORT_TERM_INTERVENTION_SERVICE_RECEIVED", "SHORT_TERM_INTERVENTION_DATE_YYYY_MM_DD",
			"SUPPORT_SERVICES_RECEIVED", "CARE_FOR_NEWCOMER_CHILDREN_CHILD", "CHILD_1_AGE", "CHILD_1_TYPE_OF_CARE",
			"CHILD_2_AGE", "CHILD_2_TYPE_OF_CARE", "CHILD_3_AGE", "CHILD_3_TYPE_OF_CARE", "CHILD_4_AGE",
			"CHILD_4_TYPE_OF_CARE", "CHILD_5_AGE", "CHILD_5_TYPE_OF_CARE", "TRANSPORTATION_ADULT",
			"TRANSPORTATION_CHILD", "PROVISIONS_FOR_DISABILITIES_CHILD", "TRANSLATION_CHILD", "BETWEEN_TRANSLATION",
			"AND_TRANSLATION", "INTERPRETATION_CHILD", "BETWEEN_INTERPRETATION", "AND_INTERPRETATION",
			"CRISIS_COUNSELLING_CHILD", "TIME_SPENT_WITH_CLIENT_ADDRESSING_CLIENTS_EMPLOYMENT_NEEDS_HOURS",
			"TIME_SPENT_WITH_CLIENT_ADDRESSING_CLIENTS_EMPLOYMENT_NEEDS_MINUTES", "REASON_FOR_UPDATE" };
	private String[] ltcenrol = { "UPDATE_RECORD_ID", "UNIQUE_IDENTIFIER", "UNIQUE_IDENTIFIER_VALUE",
			"DATE_OF_BIRTH_YYYY_MM_DD", "POSTAL_CODE_WHERE_THE_SERVICE_WAS_RECEIVED", "COURSE_CODE",
			"DATE_OF_CLIENTS_FIRST_CLASS_YYYY_MM_DD", "OFFICIAL_LANGUAGE_OF_PREFERENCE", "SUPPORT_SERVICES_RECEIVED",
			"CARE_FOR_NEWCOMER_CHILDREN_CHILD", "CHILD_1_AGE", "CHILD_1_TYPE_OF_CARE", "CHILD_2_AGE",
			"CHILD_2_TYPE_OF_CARE", "CHILD_3_AGE", "CHILD_3_TYPE_OF_CARE", "CHILD_4_AGE", "CHILD_4_TYPE_OF_CARE",
			"CHILD_5_AGE", "CHILD_5_TYPE_OF_CARE", "TRANSPORTATION_CHILD", "PROVISIONS_FOR_DISABILITIES_CHILD",
			"TRANSLATION_CHILD", "BETWEEN_TRANSLATION", "AND_TRANSLATION", "INTERPRETATION_CHILD",
			"BETWEEN_INTERPRETATION", "AND_INTERPRETATION", "CRISIS_COUNSELLING_CHILD", "REASON_FOR_UPDATE" };
	private String[] ltcsetup = { "UPDATE_RECORD_ID", "COURSE_CODE", "NOTES", "COURSE_HELD_ON_AN_ONGOING_BASIS",
			"OFFICIAL_LANGUAGE_OF_COURSE", "FORMAT_OF_TRAINING_PROVIDED", "CLASSES_HELD_AT",
			"IN_PERSON_INSTRUCTION_PERCENT", "ONLINE_DISTANCE_INSTRUCTION_PERCENT", "TOTAL_NUMBER_OF_SPOTS_IN_COURSE",
			"NUMBER_OF_IRCC_FUNDED_SPOTS_IN_COURSE", "NEW_STUDENTS_CAN_ENROL_IN_THE_COURSE",
			"SUPPORT_SERVICES_AVAILABLE_FOR_CLIENT_IN_THIS_COURSE", "CARE_FOR_NEWCOMER_CHILDREN_ADULT",
			"TRANSPORTATION_ADULT", "PROVISIONS_FOR_DISABILITIES_ADULT", "COURSE_START_DATE_YYYY_MM_DD",
			"COURSE_END_DATE_YYYY_MM_DD", "SCHEDULE_MORNING", "SCHEDULE_AFTERNOON", "SCHEDULE_EVENING",
			"SCHEDULE_ANYTIME", "SCHEDULE_WEEKEND", "SCHEDULE_ONLINE", "INSTRUCTIONAL_HOURS_PER_CLASS",
			"CLASSES_PER_WEEK", "WEEKS_OF_INSTRUCTION", "WEEKS_OF_INSTRUCTION_PER_YEAR", "DOMINANT_FOCUS_OF_THE_COURSE",
			"COURSE_DIRECTED_AT_A_SPECIFIC_TARGET_GROUP", "CHILDREN_0_14_YRS", "YOUTH_15_24_YRS", "SENIOR",
			"GENDER_SPECIFIC", "REFUGEES", "OFFICIAL_LANGUAGE_MINORITIES", "ETHNIC_CULTURAL_LINGUISTIC_GROUP",
			"DEAF_OR_HARD_OF_HEARING", "BLIND_OR_PARTIALLY_SIGHTED", "CLIENTS_WITH_OTHER_IMPAIRMENTS_PHYSICAL_MENTAL",
			"LESBIAN_GAY_BISEXUAL_TRANSGENDER_QUEER_LGBTQ", "FAMILIES_PARENTS",
			"CLIENTS_WITH_INTERNATIONAL_TRAINING_IN_A_REGULATED_PROFESSION",
			"CLIENTS_WITH_INTERNATIONAL_TRAINING_IN_A_REGULATED_TRADE", "MATERIALS_USED_IN_COURSE",
			"CITIZENSHIP_PREPARATION", "PBLA_LANGUAGE_COMPANION", "CONTACT_NAME", "STREET_NUMBER", "STREET_NAME",
			"STREET_TYPE", "STREET_DIRECTION", "UNIT_SUITE_APT", "PROVINCE", "CITY", "POSTAL_CODE", "TELEPHONE_NUMBER",
			"TELEPHONE_EXTENSION", "EMAIL_ADDRESS", "LISTENING_SKILL_LEVEL_1", "LISTENING_SKILL_LEVEL_2",
			"LISTENING_SKILL_LEVEL_3", "LISTENING_SKILL_LEVEL_4", "LISTENING_SKILL_LEVEL_5", "LISTENING_SKILL_LEVEL_6",
			"LISTENING_SKILL_LEVEL_7", "LISTENING_SKILL_LEVEL_8", "LISTENING_SKILL_LEVEL_9", "LISTENING_SKILL_LEVEL_10",
			"LISTENING_SKILL_LEVEL_11", "LISTENING_SKILL_LEVEL_12", "SPEAKING_SKILL_LEVEL_1", "SPEAKING_SKILL_LEVEL_2",
			"SPEAKING_SKILL_LEVEL_3", "SPEAKING_SKILL_LEVEL_4", "SPEAKING_SKILL_LEVEL_5", "SPEAKING_SKILL_LEVEL_6",
			"SPEAKING_SKILL_LEVEL_7", "SPEAKING_SKILL_LEVEL_8", "SPEAKING_SKILL_LEVEL_9", "SPEAKING_SKILL_LEVEL_10",
			"SPEAKING_SKILL_LEVEL_11", "SPEAKING_SKILL_LEVEL_12", "READING_SKILL_LEVEL_1", "READING_SKILL_LEVEL_2",
			"READING_SKILL_LEVEL_3", "READING_SKILL_LEVEL_4", "READING_SKILL_LEVEL_5", "READING_SKILL_LEVEL_6",
			"READING_SKILL_LEVEL_7", "READING_SKILL_LEVEL_8", "READING_SKILL_LEVEL_9", "READING_SKILL_LEVEL_10",
			"READING_SKILL_LEVEL_11", "READING_SKILL_LEVEL_12", "READING_SKILL_LEVEL_13", "READING_SKILL_LEVEL_14",
			"READING_SKILL_LEVEL_15", "READING_SKILL_LEVEL_16", "READING_SKILL_LEVEL_17", "WRITING_SKILL_LEVEL_1",
			"WRITING_SKILL_LEVEL_2", "WRITING_SKILL_LEVEL_3", "WRITING_SKILL_LEVEL_4", "WRITING_SKILL_LEVEL_5",
			"WRITING_SKILL_LEVEL_6", "WRITING_SKILL_LEVEL_7", "WRITING_SKILL_LEVEL_8", "WRITING_SKILL_LEVEL_9",
			"WRITING_SKILL_LEVEL_10", "WRITING_SKILL_LEVEL_11", "WRITING_SKILL_LEVEL_12", "WRITING_SKILL_LEVEL_13",
			"WRITING_SKILL_LEVEL_14", "WRITING_SKILL_LEVEL_15", "WRITING_SKILL_LEVEL_16", "WRITING_SKILL_LEVEL_17" };
	private String[] ltcexit = { "UPDATE_RECORD_ID", "UNIQUE_IDENTIFIER", "UNIQUE_IDENTIFIER_VALUE",
			"DATE_OF_BIRTH_YYYY_MM_DD", "COURSE_CODE", "CLIENTS_TRAINING_STATUS",
			"DATE_CLIENT_EXITED_COURSE_YYYY_MM_DD", "REASON_FOR_EXITING_COURSE", "LISTENING_CLB_LEVEL",
			"READING_CLB_LEVEL", "SPEAKING_CLB_LEVEL", "WRITING_CLB_LEVEL", "WAS_A_CERTIFICATE_ISSUED_TO_THE_CLIENT",
			"LISTENING_LEVEL_INDICATED_ON_CERTIFICATE", "SPEAKING_LEVEL_INDICATED_ON_CERTIFICATE",
			"SUPPORT_SERVICES_RECEIVED", "CARE_FOR_NEWCOMER_CHILDREN_CHILD", "CHILD_1_AGE", "CHILD_1_TYPE_OF_CARE",
			"CHILD_2_AGE", "CHILD_2_TYPE_OF_CARE", "CHILD_3_AGE", "CHILD_3_TYPE_OF_CARE", "CHILD_4_AGE",
			"CHILD_4_TYPE_OF_CARE", "CHILD_5_AGE", "CHILD_5_TYPE_OF_CARE", "TRANSPORTATION_ADULT",
			"TRANSPORTATION_CHILD", "PROVISIONS_FOR_DISABILITIES_CHILD", "TRANSLATION_CHILD", "BETWEEN_TRANSLATION",
			"AND_TRANSLATION", "INTERPRETATION_CHILD", "BETWEEN_INTERPRETATION", "AND_INTERPRETATION",
			"CRISIS_COUNSELLING_CHILD", "REASON_FOR_UPDATE" };
	// end of col. names

	public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
		doPost(request, response);
	}

	public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {

		response.setContentType("text/html");

		boolean isMultipartContent = ServletFileUpload.isMultipartContent(request);
		if (!isMultipartContent) {
			return;
		}

		FileItemFactory factory = new DiskFileItemFactory();
		ServletFileUpload upload = new ServletFileUpload(factory);

		try {
			DbConnectionHelper dbHelper = new DbConnectionHelper();
			dbHelper.findDatabaseInfo();
			Connection conn = dbHelper.connect();

			List<FileItem> fields = upload.parseRequest(request);
			Iterator<FileItem> it = fields.iterator();
			String tableName = getTableName(fields);

			if (!it.hasNext()) {
				return;
			} else {
				FileItem fileItem = it.next();
				// fileItem.getString() returns file content
				HttpServletRequestHelper helper = new HttpServletRequestHelper(request);

				String[] allLines = fileItem.getString().split("[\\r\\n]+");
				for (String row : allLines) {
					insertData(response, conn, helper, tableName, row);
				}

				response.getOutputStream().println(MERGES + " Row(s) were merged with existing row");
				response.setStatus(HttpServletResponse.SC_OK);
				MERGES = 0;
				conn.close();
			}
		} catch (SQLException | FileUploadException | ParseException e) {
			e.printStackTrace();
			response.setStatus(HttpServletResponse.SC_CONFLICT);
			if (e instanceof SQLException) {
				response.getOutputStream().println(e.getMessage());
			}
		}
	}

	private String getTableName(List<FileItem> fields) {
		Iterator<FileItem> it = fields.iterator();
		String ret = null;
		while (it.hasNext()) {
			ret = it.next().getString();
		}
		return ret;
	}

	private void insertData(HttpServletResponse response, Connection conn, HttpServletRequestHelper helper,
			String tableName, String row) throws SQLException, IOException, ParseException {

		String[] colNames;
		switch (tableName) {
		case "client_profile":
			colNames = this.cp;
			break;
		case "needs_assessment_and_referrals":
			colNames = this.nar;
			break;
		case "community_connections":
			colNames = this.cc;
			break;
		case "information_and_orientation":
			colNames = this.io;
			break;
		case "employment":
			colNames = this.emp;
			break;
		case "language_training_client_enrollment":
			colNames = this.ltcenrol;
			break;
		case "language_training_course_setup":
			colNames = this.ltcsetup;
			break;
		case "language_training_client_exit":
			colNames = this.ltcexit;
			break;
		default:
			colNames = null;
			break;
		}

		if (colNames == null) {
			return;
		} else {
			DbConflictResolver dbcr = new DbConflictResolver(conn, tableName);
			Row rowObj = new Row();
			String[] data = row.split(",\\s*(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)");
			QueryBuilder qb = new QueryBuilder(tableName);

			int i;
			for (i = 0; i < Math.min(colNames.length, data.length); i++) {
				rowObj.setField(colNames[i], data[i]);
				qb.addParam(colNames[i], data[i]);
			}

			Row conflict1 = dbcr.checkIdentifierAlreadyExist(rowObj);
			Row conflict2 = dbcr.checkUserMonthAlreadyExist(rowObj);
			if (conflict1 != null) // best to have this throw exception but oh well
			{
				FormServlet.mergeDbRow(conflict1, rowObj, conn, tableName);
				MERGES++;
				return; // instead of stopping should instead merge
			}
			if (conflict2 != null) {
				FormServlet.mergeDbRow(conflict2, rowObj, conn, tableName);
				MERGES++;
				return; // instead of stopping should instead merge
			}

			qb.setRequestHelper(helper);
			String query = qb.generateQueryString();
			PreparedStatement ps = conn.prepareStatement(query);
			qb.fillPreparedStatement(ps);
			ps.executeUpdate();
		}
	}
}
